meanAgeAsOfEnrollDt = mean(AgeAsOfEnrollDt),
sdAge = sd(AgeAsOfEnrollDt),
meanDiagAge = mean(DiagAge),
sdDiag = sd(DiagAge),
meanHbA1cTestRes = mean(HbA1cTestRes),
sdHbA1c = sd(HbA1cTestRes),
meangluBelow70 = mean(gluBelow70),
sdgluBelow70 = sd(gluBelow70),
meangluInRange = mean(gluInRange),
sdgluInRange = sd(gluInRange),
meanSHNumLast12Months_binary = mean(SHNumLast12Months_binary),
nSHN = sum(SHNumLast12Months_binary),
meanDKANumLast12Months_binary = mean(DKANumLast12Months_binary),
nDKA = sum(DKANumLast12Months_binary),
meanDiabDuration = mean(DiabDuration),
sdDiab = sd(DiabDuration),
meanPumpUse_Binary = mean(PumpUse_Binary),
nPumpUse = sum(PumpUse_Binary),
#InsulinDosesKg = mean(InsulinDosesKg),
meangluCV_num = mean(gluCV_num),
sdgluCV = sd(gluCV_num),
propMale = sum(count[Gender == "M"]) / n,
nMale = sum(count[Gender == "M"]),
propCPepDetected = sum(count[CPep_detected == "yes"]) / n,
nCPepDetected = sum(count[CPep_detected == "yes"]),
propMedicareOther = sum(count[Ins_Combined == "Medicare/other"]) / n,
nMedicareOther = sum(count[Ins_Combined == "Medicare/other"]),
propPrivate = sum(count[Ins_Combined == "Private"]) / n,
nPrivate = sum(count[Ins_Combined == "Private"]),
propPrivateMedicare = sum(count[Ins_Combined == "Private and Medicare"]) / n,
nPrivateMedicare = sum(count[Ins_Combined == "Private and Medicare"]),
propLessBach = sum(count[EducationLevel_Tri == "<Bach"]) / n,
nLessBach = sum(count[EducationLevel_Tri == "<Bach"]),
propBach = sum(count[EducationLevel_Tri == "Bach"]) / n,
nBach = sum(count[EducationLevel_Tri == "Bach"]),
propGreaterBach = sum(count[EducationLevel_Tri == ">Bach"]) / n,
nGreaterBach = sum(count[EducationLevel_Tri == ">Bach"]),
meanBMI = mean(BMI),
sdBMI = sd(BMI),
propWhite = sum(count[Race_binary == "White"], na.rm = TRUE) / n,
nWhite = sum(count[Race_binary == "White"], na.rm = TRUE),
propNotHispanic = sum(count[Ethnicity_binary == "Not Hispanic or Latino"], na.rm = TRUE) / n,
nNotHispanic = sum(count[Ethnicity_binary == "Not Hispanic or Latino"], na.rm = TRUE),
propNotHispanicAndWhite = sum(count[Ethnicity_binary == "Not Hispanic or Latino" & Race_binary == "White"], na.rm = TRUE) / n,
nNotHispanicAndWhite = sum(count[Ethnicity_binary == "Not Hispanic or Latino" & Race_binary == "White"], na.rm = TRUE),
meanInsulinDosesKg = mean(InsulinDosesKg),
sdInsulinDosesKg = sd(InsulinDosesKg)
)
opt_table_t <- t(opt_table)[-c(1,2), ]
opt_table_t <- round(opt_table_t, 3)
#colnames(opt_table_t) <- c("BGM (n = 19)", "CGM (n = 165)")
colnames(opt_table_t) <- c("BGM (n = 21)", "CGM (n = 173)")
opt_table_t <- cbind(opt_table_t[, 2], opt_table_t[, 1])
colnames(opt_table_t) <- c("CGM", "BGM")
opt_table <- dat_with_opt_trt %>%
group_by(opt) %>%
summarize(n = n(),
meanAgeAsOfEnrollDt = mean(AgeAsOfEnrollDt),
sdAge = sd(AgeAsOfEnrollDt),
meanDiagAge = mean(DiagAge),
sdDiag = sd(DiagAge),
meanHbA1cTestRes = mean(HbA1cTestRes),
sdHbA1c = sd(HbA1cTestRes),
meangluBelow70 = mean(gluBelow70),
sdgluBelow70 = sd(gluBelow70),
meangluInRange = mean(gluInRange),
sdgluInRange = sd(gluInRange),
meanSHNumLast12Months_binary = mean(SHNumLast12Months_binary),
nSHN = sum(SHNumLast12Months_binary),
meanDKANumLast12Months_binary = mean(DKANumLast12Months_binary),
nDKA = sum(DKANumLast12Months_binary),
meanDiabDuration = mean(DiabDuration),
sdDiab = sd(DiabDuration),
meanPumpUse_Binary = mean(PumpUse_Binary),
nPumpUse = sum(PumpUse_Binary),
#InsulinDosesKg = mean(InsulinDosesKg),
meangluCV_num = mean(gluCV_num),
sdgluCV = sd(gluCV_num),
propMale = sum(count[Gender == "M"]) / n,
nMale = sum(count[Gender == "M"]),
propCPepDetected = sum(count[CPep_detected == "yes"]) / n,
nCPepDetected = sum(count[CPep_detected == "yes"]),
propMedicareOther = sum(count[Ins_Combined == "Medicare/other"]) / n,
nMedicareOther = sum(count[Ins_Combined == "Medicare/other"]),
propPrivate = sum(count[Ins_Combined == "Private"]) / n,
nPrivate = sum(count[Ins_Combined == "Private"]),
propPrivateMedicare = sum(count[Ins_Combined == "Private and Medicare"]) / n,
nPrivateMedicare = sum(count[Ins_Combined == "Private and Medicare"]),
propLessBach = sum(count[EducationLevel_Tri == "<Bach"]) / n,
nLessBach = sum(count[EducationLevel_Tri == "<Bach"]),
propBach = sum(count[EducationLevel_Tri == "Bach"]) / n,
nBach = sum(count[EducationLevel_Tri == "Bach"]),
propGreaterBach = sum(count[EducationLevel_Tri == ">Bach"]) / n,
nGreaterBach = sum(count[EducationLevel_Tri == ">Bach"]),
meanBMI = mean(BMI),
sdBMI = sd(BMI),
propWhite = sum(count[Race_binary == "White"], na.rm = TRUE) / n,
nWhite = sum(count[Race_binary == "White"], na.rm = TRUE),
propNotHispanic = sum(count[Ethnicity_binary == "Not Hispanic or Latino"], na.rm = TRUE) / n,
nNotHispanic = sum(count[Ethnicity_binary == "Not Hispanic or Latino"], na.rm = TRUE),
propNotHispanicAndWhite = sum(count[Ethnicity_binary == "Not Hispanic or Latino" & Race_binary == "White"], na.rm = TRUE) / n,
nNotHispanicAndWhite = sum(count[Ethnicity_binary == "Not Hispanic or Latino" & Race_binary == "White"], na.rm = TRUE),
meanInsulinDosesKg = mean(InsulinDosesKg, na.rm = TRUE),
sdInsulinDosesKg = sd(InsulinDosesKg, na.rm = TRUE)
)
opt_table_t <- t(opt_table)[-c(1,2), ]
opt_table_t <- round(opt_table_t, 3)
#colnames(opt_table_t) <- c("BGM (n = 19)", "CGM (n = 165)")
colnames(opt_table_t) <- c("BGM (n = 21)", "CGM (n = 173)")
opt_table_t <- cbind(opt_table_t[, 2], opt_table_t[, 1])
colnames(opt_table_t) <- c("CGM", "BGM")
t.test(DiagAge ~ opt, dat_with_opt_trt)
t.test(gluCV ~ opt, dat_with_opt_trt)
t.test(gluCV_num ~ opt, dat_with_opt_trt)
names(dat_with_opt_trt)
t.test(gluCV_num ~ opt, dat_with_opt_trt)
t.test(AgeAsOfEnrollDt ~ opt, dat_with_opt_trt)
t.test(DiabDuration ~ opt, dat_with_opt_trt)
t.test(DiagAge ~ opt, dat_with_opt_trt)
t.test(HbA1cTestRes ~ opt, dat_with_opt_trt)
t.test(InsulinDosesKg ~ opt, dat_with_opt_trt)
t.test(BMI ~ opt, dat_with_opt_trt)
t.test(gluBelow70 ~ opt, dat_with_opt_trt)
t.test(gluInRange ~ opt, dat_with_opt_trt)
prop.test(x = c(83, 10), n = c(173, 21))
names(dat_with_opt_trt)
prop.test(x = c(83, 10), n = c(173, 21)) # Gender
prop.test(x = c(157, 21), n = c(173, 21)) # Non-Hispanic
prop.test(x = c(162, 21), n = c(173, 21)) # White
prop.test(x = c(70, 5), n = c(173, 21)) # <Bach
prop.test(x = c(70, 5), n = c(173, 21)) # <Bach
prop.test(x = c(55, 7), n = c(173, 21)) # Bach
prop.test(x = c(48, 9), n = c(173, 21)) # >Bach
prop.test(x = c(49, 3), n = c(173, 21)) # Private
prop.test(x = c(58, 9), n = c(173, 21)) # Private/Medicare
prop.test(x = c(66, 9), n = c(173, 21)) # Medicare/other
prop.test(x = c(93, 9), n = c(173, 21)) # Insulin Pump Use
prop.test(x = c(37, 9), n = c(173, 21)) # C-Pep
prop.test(x = c(27, 1), n = c(173, 21)) # SHN
prop.test(x = c(8, 0), n = c(173, 21)) # DKA
################## START HERE ##############
################## START HERE ##############
################## START HERE ##############
################## START HERE ##############
################## START HERE ##############
t.test(gluCV_num ~ opt, dat_with_opt_trt)
t.test(AgeAsOfEnrollDt ~ opt, dat_with_opt_trt)
t.test(DiabDuration ~ opt, dat_with_opt_trt)
t.test(DiagAge ~ opt, dat_with_opt_trt)
t.test(HbA1cTestRes ~ opt, dat_with_opt_trt)
t.test(InsulinDosesKg ~ opt, dat_with_opt_trt)
t.test(BMI ~ opt, dat_with_opt_trt)
t.test(gluBelow70 ~ opt, dat_with_opt_trt)
t.test(gluInRange ~ opt, dat_with_opt_trt)
prop.test(x = c(83, 10), n = c(173, 21)) # Gender
prop.test(x = c(157, 21), n = c(173, 21)) # Non-Hispanic
prop.test(x = c(162, 21), n = c(173, 21)) # White
prop.test(x = c(70, 5), n = c(173, 21)) # <Bach
prop.test(x = c(55, 7), n = c(173, 21)) # Bach
prop.test(x = c(48, 9), n = c(173, 21)) # >Bach
prop.test(x = c(49, 3), n = c(173, 21)) # Private
prop.test(x = c(58, 9), n = c(173, 21)) # Private/Medicare
prop.test(x = c(66, 9), n = c(173, 21)) # Medicare/other
prop.test(x = c(93, 9), n = c(173, 21)) # Insulin Pump Use
prop.test(x = c(37, 9), n = c(173, 21)) # C-Pep
prop.test(x = c(27, 1), n = c(173, 21)) # SHN
prop.test(x = c(8, 0), n = c(173, 21)) # DKA
t.test(InsulinDosesKg ~ opt, dat_with_opt_trt)
names(dat)
dim(dat)
dat_clean_XAY_full <- readRDS("./data/dat_clean_XAY_full.rds")
dat_clean_XAY_full <- readRDS("./data/dat_clean_XAY_full.rds")
dim(dat_clean_XAY_full)
names(dat_clean_XAY_full)
### dataset_creation.R
### Collects variables from different datasets and compiles them
### working directory = "Diabetes/Repository"
library(tidyverse)
select <- dplyr::select
`%notin%` <- Negate(`%in%`)
PtRoster <- read.table("data/study data/PtRoster.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16")
DiabScreening <- read.table("data/study data/DiabScreening.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16")
DiabSocioEcon <- read.table("data/study data/DiabSocioEcon.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16", quote="\"")
DiabLocalHbA1c <- read.table("data/study data/DiabLocalHbA1c.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16")
DiabPhysExam <- read.table("data/study data/DiabPhysExam.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16")
gluIndicesRCT <- read.table("data/study data/gluIndices RCT.txt", header = TRUE, sep = "|") %>%
mutate(gluBelow70 = parse_number(as.character(gluBelow70))) %>%
#mutate(gluAbove180 = parse_number(as.character(gluAbove180))) %>%
mutate(gluInRange = parse_number(as.character(gluInRange)))
STASampleResults <- read.table("data/study data/STASampleResults.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16")
# Dataset with C-Pep included
cpep_info <- STASampleResults %>%
filter(Visit == "Randomization", ResultName == "CPEP", STAResultStatus != "Canceled")
#cpep_info$PtID <- as.character(cpep_info$PtID)
# Table 1: Baseline Characteristics
# [PtRoster] Age
# [DiabScreening] Diabetes duration (use DiagAge and subtract Age from PtRoster from it)
# [DiabScreening] Age at diagnosis
# [DiabScreening] Sex
# [DiabScreening] Race/Ethnicity
# [DiabSocioEcon] Annual HH income
# [DiabSocioEcon] Highest education
# [DiabSocioEcon] Health insurance
# [DiabScreening$CGMUseStat] CGM use (past vs never) - NOT USED
# [DiabScreening$PumpUse] Insulin pump use (both InsModPump and PumpUse have 111 users in DiabScreening whereas paper says 58+50)
# [DiabLocalHbA1c] Screening Hba1c (filter for Visit=="Screening")
# [????] Hba1c at randomization
# [????] Detectable C-peptide
# [DiabScreening$UnitsInsTotal / DiabPhysExam$Weight] Total daily insulin doses per kg (11 missing, matches paper exactly - 97+95)
# [DiabScreening] Severe hypoglycemia event in past 12 mo
# [DiabScreening] DKA event in past 12 mo
# Functional activities questionnaire score
# NIH toolbox cognition battery age-corrected fluid composite score
# Cognition status measured by NIH toolbox cognition battery
# Reduced hypo awareness
# Wear hearing aids regularly
# Near vision card last line worse than 20/40
# eTable 16: Subgroup Analysis by Baseline Characteristics
# [already covered] Age
# [already covered] T1D Duration
# [already covered] Age at diagnosis
# [gluIndicesRCT$gluBelow70 where period == "1) Baseline", time == "1) Overall"] Percent time <70
# [gluIndicesRCT$gluCV where period == "1) Baseline", time == "1) Overall"] Coefficient of Variation
# [?????] HbA1c (screening/randomization/different?)
# [already covered] Gender
# [already covered] Race/ethnicity
# [already covered] Highest education completed
# [already covered] NIH Toolbox age-corrected fluid composite score
# [already covered] Cognition status measured by the NIH toolbox
# [already covered] Hypoglycemic awareness
# [already covered] Detectable C-peptide
# [already covered] Severe hypo event past 12 months
# patients <- DiabScreening$PtID #213
patients <- (gluIndicesRCT %>% filter(period == "1) Baseline" & time == "1) Overall"))$PtID # 203
# Variable Collection
dat_raw_X <- select(PtRoster, RecID, PtID, SiteID, AgeAsOfEnrollDt) %>%
filter(PtID %in% patients) %>%
left_join(select(DiabScreening, PtID, DiagAge, Gender, Ethnicity, Race, PumpUse, SHNumLast12Months, DKANumLast12Months), by = "PtID") %>%
left_join(select(DiabSocioEcon, PtID, EducationLevel, AnnualIncome, InsPrivate, InsMedicare), by = "PtID") %>%
left_join(select(DiabLocalHbA1c %>% filter(Visit == "Screening"), PtID, HbA1cTestRes), by = "PtID") %>%
left_join(select(DiabScreening, PtID, UnitsInsTotal), by = "PtID") %>%
left_join(select(DiabPhysExam %>% filter(Visit == "Screening"), PtID, Weight, WeightUnits), by = "PtID") %>%
left_join(select(gluIndicesRCT %>% filter(period == "1) Baseline" & time == "1) Overall"), PtID, gluBelow70, gluCV, gluInRange), by = "PtID") %>%
left_join(select(cpep_info, PtID, Value), by = c("PtID"))
# Data Manipulation
less_bach <- c("12th grade - no diploma", "Associate Degree (AA)",
"High school graduate/diploma/GED",
"Some college but no degree")
bach <- c("Bachelor's Degree (BS,BA,AB)")
greater_bach <- c("Doctorate Degree (PhD, EdD)",
"Master's Degree (MA, MS, MSW, MBA, MPH)",
"Professional Degree (MD, DDS, DVM, LLB, JD)")
dat_clean_X <- dat_raw_X %>%
mutate(SHNumLast12Months_binary = ifelse(SHNumLast12Months == "0", 0, 1),
DKANumLast12Months_binary = ifelse(DKANumLast12Months == 0, 0, 1),
Weight_Kg = ifelse(WeightUnits == "kg", Weight, Weight / 2.20462),
DiabDuration = AgeAsOfEnrollDt - DiagAge,
PumpUse_Binary = ifelse(PumpUse == "", 0, 1),
InsulinDosesKg = UnitsInsTotal / Weight_Kg,
EducationLevel_Tri = ifelse(EducationLevel %in% less_bach, "<Bach",
ifelse(EducationLevel %in% bach, "Bach",
ifelse(EducationLevel %in% greater_bach, ">Bach", NA))),
Ins_Combined = ifelse(is.na(InsPrivate), "Medicare/other",
ifelse(!is.na(InsPrivate) & is.na(InsMedicare), "Private",
ifelse(!is.na(InsPrivate) & !is.na(InsMedicare), "Private and Medicare", NA))),
gluCV_num = readr::parse_number(as.character(gluCV)),
CPep_detected = ifelse(Value == "<0.003", "no", "yes")) %>%
select(!c(RecID, SiteID, Ethnicity, Race, PumpUse, SHNumLast12Months, DKANumLast12Months, EducationLevel, AnnualIncome, InsPrivate, InsMedicare, UnitsInsTotal, Weight, WeightUnits, gluCV, Weight_Kg, Value))
dat_clean_XAY <- dat_clean_X %>%
left_join(select(PtRoster, PtID, TrtGroup), by = "PtID") %>%
left_join(select(gluIndicesRCT %>% filter(period == "2) Follow-up (26 week)" & time == "1) Overall"), PtID, gluBelow70Chg), by = "PtID") %>%
mutate(gluBelow70Chg = -gluBelow70Chg) %>% # Changed so that "better" values (more negative gluBelow70Chg) are positive
column_to_rownames("PtID")
dat_clean_XAY <- dat_clean_XAY[,!(names(dat_clean_XAY) %in% c("InsulinDosesKg"))]
dat_clean_XAY_full <- na.omit(dat_clean_XAY)
#saveRDS(dat_clean_XAY_full, "./data/dat_clean_XAY_full.rds")
# # Dataset with C-Pep included
# cpep_info <- STASampleResults %>%
#   filter(Visit == "Randomization", ResultName == "CPEP", STAResultStatus != "Canceled")
# cpep_info$PtID <- as.character(cpep_info$PtID)
#
# dat_clean_XAY_full_2 <- rownames_to_column(dat_clean_XAY_full) %>%
#   left_join(select(cpep_info, PtID, Value), by = c("rowname" = "PtID")) %>%
#   rename(CPep_value = Value) %>%
#   mutate(CPep_detected = ifelse(CPep_value == "<0.003", "no", "yes")) %>%
#   select(!c(CPep_value)) %>%
#   column_to_rownames("rowname")
# #saveRDS(dat_clean_XAY_full_2, "./data/dat_clean_XAY_full_2.rds")
dim(dat)
dim(dat_clean_XAY_full)
identical(dat, dat_clean_XAY_full)
source("./scripts/F10CV_base.R")
source("./scripts/F21policy_tree.R")
dat_clean_XAY_full <- readRDS("./data/dat_clean_XAY_full.rds")
dat <- dat_clean_XAY_full
# CV folds setup
set.seed(1)
n <- nrow(dat)
K = 5 # outer folds
L = K
cv_folds <- cv.folds(n, K)
train_folds <- cv_folds$train
test_folds <- cv_folds$test
# Inner CV folds setup
cv_folds_inner <- list(K)
for (k in 1:K) {
cv_folds_inner[[k]] <- cv.folds(n = NA, K, is.inner = TRUE, outer_set = train_folds[[k]])
}
# Checks
# c(cv_folds_inner[[1]]$test[[1]], cv_folds_inner[[1]]$train[[1]]) %in% train_folds[[1]] # all true
# c(cv_folds_inner[[1]]$test[[2]], cv_folds_inner[[1]]$train[[2]]) %in% train_folds[[1]] # all true
# c(cv_folds_inner[[2]]$test[[1]], cv_folds_inner[[2]]$train[[1]]) %in% train_folds[[1]] # shouldn't all be true
# Policy Tree K-Fold Inner CV for Parameter Tuning
set.seed(2)
depth = 1
results_depth1 <- run.policytree.cv.inner(dat = dat, cv_folds_inner = cv_folds_inner, K = K, L = L, depth = depth)
colMeans(results_depth1)
depth = 2
results_depth2 <- run.policytree.cv.inner(dat = dat, cv_folds_inner = cv_folds_inner, K = K, L = L, depth = depth)
colMeans(results_depth2)
# Policy Tree K-Fold CV
set.seed(2)
depth = 1
results <- run.policytree.cv(dat = dat, cv_folds = cv_folds, K = K, depth = depth)
colMeans(results)
dat <- dat_clean_XAY_full
# CV folds setup
set.seed(1)
n <- nrow(dat)
K = 5 # outer folds
L = K
cv_folds <- cv.folds(n, K)
train_folds <- cv_folds$train
test_folds <- cv_folds$test
# Inner CV folds setup
cv_folds_inner <- list(K)
for (k in 1:K) {
cv_folds_inner[[k]] <- cv.folds(n = NA, K, is.inner = TRUE, outer_set = train_folds[[k]])
}
# Checks
# c(cv_folds_inner[[1]]$test[[1]], cv_folds_inner[[1]]$train[[1]]) %in% train_folds[[1]] # all true
# c(cv_folds_inner[[1]]$test[[2]], cv_folds_inner[[1]]$train[[2]]) %in% train_folds[[1]] # all true
# c(cv_folds_inner[[2]]$test[[1]], cv_folds_inner[[2]]$train[[1]]) %in% train_folds[[1]] # shouldn't all be true
# Policy Tree K-Fold Inner CV for Parameter Tuning
set.seed(2)
depth = 1
results_depth1 <- run.policytree.cv.inner(dat = dat, cv_folds_inner = cv_folds_inner, K = K, L = L, depth = depth)
colMeans(results_depth1)
depth = 2
results_depth2 <- run.policytree.cv.inner(dat = dat, cv_folds_inner = cv_folds_inner, K = K, L = L, depth = depth)
colMeans(results_depth2)
dim(dat)
### dataset_creation.R
### Collects variables from different datasets and compiles them
### working directory = "Diabetes/Repository"
library(tidyverse)
select <- dplyr::select
`%notin%` <- Negate(`%in%`)
PtRoster <- read.table("data/study data/PtRoster.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16")
DiabScreening <- read.table("data/study data/DiabScreening.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16")
DiabSocioEcon <- read.table("data/study data/DiabSocioEcon.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16", quote="\"")
DiabLocalHbA1c <- read.table("data/study data/DiabLocalHbA1c.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16")
DiabPhysExam <- read.table("data/study data/DiabPhysExam.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16")
gluIndicesRCT <- read.table("data/study data/gluIndices RCT.txt", header = TRUE, sep = "|") %>%
mutate(gluBelow70 = parse_number(as.character(gluBelow70))) %>%
#mutate(gluAbove180 = parse_number(as.character(gluAbove180))) %>%
mutate(gluInRange = parse_number(as.character(gluInRange)))
STASampleResults <- read.table("data/study data/STASampleResults.txt", header = TRUE, sep = "|", fileEncoding = "UTF-16")
# Dataset with C-Pep included
cpep_info <- STASampleResults %>%
filter(Visit == "Randomization", ResultName == "CPEP", STAResultStatus != "Canceled")
#cpep_info$PtID <- as.character(cpep_info$PtID)
# Table 1: Baseline Characteristics
# [PtRoster] Age
# [DiabScreening] Diabetes duration (use DiagAge and subtract Age from PtRoster from it)
# [DiabScreening] Age at diagnosis
# [DiabScreening] Sex
# [DiabScreening] Race/Ethnicity
# [DiabSocioEcon] Annual HH income
# [DiabSocioEcon] Highest education
# [DiabSocioEcon] Health insurance
# [DiabScreening$CGMUseStat] CGM use (past vs never) - NOT USED
# [DiabScreening$PumpUse] Insulin pump use (both InsModPump and PumpUse have 111 users in DiabScreening whereas paper says 58+50)
# [DiabLocalHbA1c] Screening Hba1c (filter for Visit=="Screening")
# [????] Hba1c at randomization
# [????] Detectable C-peptide
# [DiabScreening$UnitsInsTotal / DiabPhysExam$Weight] Total daily insulin doses per kg (11 missing, matches paper exactly - 97+95)
# [DiabScreening] Severe hypoglycemia event in past 12 mo
# [DiabScreening] DKA event in past 12 mo
# Functional activities questionnaire score
# NIH toolbox cognition battery age-corrected fluid composite score
# Cognition status measured by NIH toolbox cognition battery
# Reduced hypo awareness
# Wear hearing aids regularly
# Near vision card last line worse than 20/40
# eTable 16: Subgroup Analysis by Baseline Characteristics
# [already covered] Age
# [already covered] T1D Duration
# [already covered] Age at diagnosis
# [gluIndicesRCT$gluBelow70 where period == "1) Baseline", time == "1) Overall"] Percent time <70
# [gluIndicesRCT$gluCV where period == "1) Baseline", time == "1) Overall"] Coefficient of Variation
# [?????] HbA1c (screening/randomization/different?)
# [already covered] Gender
# [already covered] Race/ethnicity
# [already covered] Highest education completed
# [already covered] NIH Toolbox age-corrected fluid composite score
# [already covered] Cognition status measured by the NIH toolbox
# [already covered] Hypoglycemic awareness
# [already covered] Detectable C-peptide
# [already covered] Severe hypo event past 12 months
# patients <- DiabScreening$PtID #213
patients <- (gluIndicesRCT %>% filter(period == "1) Baseline" & time == "1) Overall"))$PtID # 203
# Variable Collection
dat_raw_X <- select(PtRoster, RecID, PtID, SiteID, AgeAsOfEnrollDt) %>%
filter(PtID %in% patients) %>%
left_join(select(DiabScreening, PtID, DiagAge, Gender, Ethnicity, Race, PumpUse, SHNumLast12Months, DKANumLast12Months), by = "PtID") %>%
left_join(select(DiabSocioEcon, PtID, EducationLevel, AnnualIncome, InsPrivate, InsMedicare), by = "PtID") %>%
left_join(select(DiabLocalHbA1c %>% filter(Visit == "Screening"), PtID, HbA1cTestRes), by = "PtID") %>%
left_join(select(DiabScreening, PtID, UnitsInsTotal), by = "PtID") %>%
left_join(select(DiabPhysExam %>% filter(Visit == "Screening"), PtID, Weight, WeightUnits), by = "PtID") %>%
left_join(select(gluIndicesRCT %>% filter(period == "1) Baseline" & time == "1) Overall"), PtID, gluBelow70, gluCV, gluInRange), by = "PtID") %>%
left_join(select(cpep_info, PtID, Value), by = c("PtID"))
# Data Manipulation
less_bach <- c("12th grade - no diploma", "Associate Degree (AA)",
"High school graduate/diploma/GED",
"Some college but no degree")
bach <- c("Bachelor's Degree (BS,BA,AB)")
greater_bach <- c("Doctorate Degree (PhD, EdD)",
"Master's Degree (MA, MS, MSW, MBA, MPH)",
"Professional Degree (MD, DDS, DVM, LLB, JD)")
dat_clean_X <- dat_raw_X %>%
mutate(SHNumLast12Months_binary = ifelse(SHNumLast12Months == "0", 0, 1),
DKANumLast12Months_binary = ifelse(DKANumLast12Months == 0, 0, 1),
Weight_Kg = ifelse(WeightUnits == "kg", Weight, Weight / 2.20462),
DiabDuration = AgeAsOfEnrollDt - DiagAge,
PumpUse_Binary = ifelse(PumpUse == "", 0, 1),
InsulinDosesKg = UnitsInsTotal / Weight_Kg,
EducationLevel_Tri = ifelse(EducationLevel %in% less_bach, "<Bach",
ifelse(EducationLevel %in% bach, "Bach",
ifelse(EducationLevel %in% greater_bach, ">Bach", NA))),
Ins_Combined = ifelse(is.na(InsPrivate), "Medicare/other",
ifelse(!is.na(InsPrivate) & is.na(InsMedicare), "Private",
ifelse(!is.na(InsPrivate) & !is.na(InsMedicare), "Private and Medicare", NA))),
gluCV_num = readr::parse_number(as.character(gluCV)),
CPep_detected = ifelse(Value == "<0.003", "no", "yes")) %>%
select(!c(RecID, SiteID, Ethnicity, Race, PumpUse, SHNumLast12Months, DKANumLast12Months, EducationLevel, AnnualIncome, InsPrivate, InsMedicare, UnitsInsTotal, Weight, WeightUnits, gluCV, Weight_Kg, Value))
dat_clean_XAY <- dat_clean_X %>%
left_join(select(PtRoster, PtID, TrtGroup), by = "PtID") %>%
left_join(select(gluIndicesRCT %>% filter(period == "2) Follow-up (26 week)" & time == "1) Overall"), PtID, gluBelow70Chg), by = "PtID") %>%
mutate(gluBelow70Chg = -gluBelow70Chg) %>% # Changed so that "better" values (more negative gluBelow70Chg) are positive
column_to_rownames("PtID")
dat_clean_XAY <- dat_clean_XAY[,!(names(dat_clean_XAY) %in% c("InsulinDosesKg"))]
dat_clean_XAY_full <- na.omit(dat_clean_XAY)
#saveRDS(dat_clean_XAY_full, "./data/dat_clean_XAY_full.rds")
# # Dataset with C-Pep included
# cpep_info <- STASampleResults %>%
#   filter(Visit == "Randomization", ResultName == "CPEP", STAResultStatus != "Canceled")
# cpep_info$PtID <- as.character(cpep_info$PtID)
#
# dat_clean_XAY_full_2 <- rownames_to_column(dat_clean_XAY_full) %>%
#   left_join(select(cpep_info, PtID, Value), by = c("rowname" = "PtID")) %>%
#   rename(CPep_value = Value) %>%
#   mutate(CPep_detected = ifelse(CPep_value == "<0.003", "no", "yes")) %>%
#   select(!c(CPep_value)) %>%
#   column_to_rownames("rowname")
# #saveRDS(dat_clean_XAY_full_2, "./data/dat_clean_XAY_full_2.rds")
dat <- dat_clean_XAY_full
# CV folds setup
set.seed(1)
n <- nrow(dat)
K = 5 # outer folds
L = K
cv_folds <- cv.folds(n, K)
train_folds <- cv_folds$train
test_folds <- cv_folds$test
# Inner CV folds setup
cv_folds_inner <- list(K)
for (k in 1:K) {
cv_folds_inner[[k]] <- cv.folds(n = NA, K, is.inner = TRUE, outer_set = train_folds[[k]])
}
# Checks
# c(cv_folds_inner[[1]]$test[[1]], cv_folds_inner[[1]]$train[[1]]) %in% train_folds[[1]] # all true
# c(cv_folds_inner[[1]]$test[[2]], cv_folds_inner[[1]]$train[[2]]) %in% train_folds[[1]] # all true
# c(cv_folds_inner[[2]]$test[[1]], cv_folds_inner[[2]]$train[[1]]) %in% train_folds[[1]] # shouldn't all be true
# Policy Tree K-Fold Inner CV for Parameter Tuning
set.seed(2)
depth = 1
results_depth1 <- run.policytree.cv.inner(dat = dat, cv_folds_inner = cv_folds_inner, K = K, L = L, depth = depth)
colMeans(results_depth1)
depth = 2
results_depth2 <- run.policytree.cv.inner(dat = dat, cv_folds_inner = cv_folds_inner, K = K, L = L, depth = depth)
colMeans(results_depth2)
dim(dat_clean_XAY_full)
saveRDS(dat_clean_XAY_full, "./data/dat_clean_XAY_full.rds")
names(dat_clean_XAY_full)
# Policy Tree K-Fold CV
set.seed(2)
depth = 1
results <- run.policytree.cv(dat = dat, cv_folds = cv_folds, K = K, depth = depth)
colMeans(results)
results
restuls$test
results$test
results
class(results)
results[,2]
sd(results[,2])
sd(results[,2]) / sqrt(5)
sd(results[,2]) / sqrt(5) # Optimal
sd(results[,3]) / sqrt(5) # CGM-Only
sd(results[,4]) / sqrt(5) # BGM-Only
rm(list=ls())
